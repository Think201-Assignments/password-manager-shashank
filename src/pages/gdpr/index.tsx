import Head from "next/head";
import Image from "next/image";
// import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";

// const inter = Inter({ subsets: ["latin"] });
// import NavBar from "./appBar";

import { Box, Button, Link, Typography } from "@mui/material";
import React, { useEffect, useState } from "react";
// import Layout from "@/layout/layout";
import { NextPageWithLayout } from "../_app";
import CookieConsent from "react-cookie-consent";

import { setCookie } from "cookies-next";
import { getCookie } from "cookies-next";
import { deleteCookie } from "cookies-next";

import Switch from "@mui/material/Switch";
import Script from "next/script";
// import { useUserContext } from "@/context/store";
import { BlockPicker } from "react-color";
import CustomDialogBox from "./customDialogBox";

// import ColorPicker from "material-ui-color-picker";
// import Link from "next/link";

// import consentGranted from "./ga";

const Page: NextPageWithLayout = () => {
  // const { Permission } = useUserContext();
  const [open, setOpen] = useState(false);
  const [checked, setChecked] = React.useState(false);
  const [Analytics, setGoogleAnalytics] = React.useState(false);
  const [location, setLocation] = useState<any>();
  const [blockPickerColor, setBlockPickerColor] = React.useState("#37d67a");
  const [TextPickerColor, setTextPickerColor] = React.useState("#4e503b");
  const [backgroundColorPicker, setbackgroundColorPicker] =
    React.useState("#ffff");

  const [status, setStatus] = React.useState({
    Cookie: false,
    GoogleAnalytics: false,
  });
  const options: any | [] = [
    {
      name: "something",
    },
  ];
  useEffect(() => {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(({ coords }) => {
        const { latitude, longitude } = coords;
        setLocation({ latitude, longitude });
      });
      // console.log(location);
    }
  }, []);
  const [user, setUser] = useState(null);
  React.useEffect(() => {
    const value = localStorage.getItem("analytics_storage");

    const allowGoogleAnalytics = !!value ? JSON.parse(value) : false;
    // console.log("This is my data", Permission.googleAnalytics);
    // console.log("userStatus", allowGoogleAnalytics);
  }, []);

  // fetch data
  useEffect(() => {
    const value = localStorage.getItem("analytics_storage");
    const user = !!value ? JSON.parse(value) : undefined;
    // console.log(user);
    setUser(user);
  }, []);
  const d = getCookie("Cookie");
  const handleClose = () => {
    setOpen(false);
  };
  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setChecked(event.target.checked);
    // setState({ ...state,cookie: checked });
    checked ? setCookiestatus() : changeCookiestatus();
  };
  const setCookiestatus = () => {
    status.Cookie = false;
    setStatus(status);
    localStorage.setItem("status", JSON.stringify(status));
  };
  const changeCookiestatus = () => {
    status.Cookie = true;
    setStatus(status);
    localStorage.setItem("status", JSON.stringify(status));
  };
  const handleAnalyticsChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setGoogleAnalytics(event.target.checked);
    !Analytics ? setAnalytics() : changeAnalytics();
  };
  const setAnalytics = () => {
    // console.log("data is in the local storage");
    status.GoogleAnalytics = true;
    setStatus(status);

    // sttStatus({..status,status.GoogleAnalytics = true});
    localStorage.setItem("status", JSON.stringify(status));
    localStorage.setItem("analytics_storage", JSON.stringify(!Analytics));
  };
  const changeAnalytics = () => {
    status.GoogleAnalytics = false;
    localStorage.setItem("status", JSON.stringify(status));
    localStorage.setItem("analytics_storage", JSON.stringify(!Analytics));
  };
  // const [variable, setVaraible] = useState(true);
  // React.useEffect(() => {
  //   const value = localStorage.getItem("status");
  //   const temp = !!value ? JSON.parse(value) : undefined;
  //   if (temp) {
  //     console.log("hey i am variable", temp?.Cookie);
  //     setVaraible(temp.Cookie);
  //   }
  //   // console.log(allowGoogleAnalytics);
  //   // setallowGoogleAnalytics(allowGoogleAnalytics);
  // }, []);
  const [position, setPosition] = useState(false);
  return (
    <>
      <Head>
        <title>Create Next App</title>

        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        {/* <meta name="viewport" content="width=device-width, initial-scale=1" /> */}

        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* {console.log("Cookie", checked)}
      {console.log("Analytics", Analytics)} */}
      {true ? (
        <CookieConsent
          onAccept={() => {
            status.Cookie = true;
            status.GoogleAnalytics = true;
            setStatus(status);
            localStorage.setItem("status", JSON.stringify(status));
            localStorage.setItem("Permission", "granted");
          }}
          location="bottom"
          buttonText="Accept All"
          cookieName="GDPR"
          style={{ background: blockPickerColor, color: TextPickerColor }}
          // buttonStyle={{}}

          buttonStyle={{
            color: TextPickerColor,
            fontSize: "13px",
            fontWeight: "bold",
            background: backgroundColorPicker,
            // background: blockPickerColor,
          }}
        >
          This website uses cookies to enhance the user experience.{" "}
          <Button
            // sx={{ float: position ? "left" : "right" }}
            sx={{ ml: 5 }}
            onClick={() => setOpen(true)}
            variant="contained"
          >
            Manage
          </Button>
        </CookieConsent>
      ) : null}
      <CustomDialogBox Title={"Manage"} handleClose={handleClose} open={open}>
        {" "}
        <Box sx={{ width: "500px" }}>
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              borderBottom: "solid 1px  #c0c0c0",
            }}
          >
            <Typography sx={{ ml: 4, mt: 1 }}>Cookie</Typography>
            <Switch
              color="secondary"
              checked={checked}
              onChange={handleChange}
              sx={{ color: "black" }}
              inputProps={{ "aria-label": "controlled" }}
            />
          </Box>

          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              borderBottom: "solid 1px  #c0c0c0",
              py: 1,
            }}
          >
            <Typography sx={{ ml: 4, mt: 1 }}>SetAnalytics</Typography>
            <Switch
              color="secondary"
              checked={Analytics}
              onChange={handleAnalyticsChange}
              sx={{ color: "black" }}
              inputProps={{ "aria-label": "controlled" }}
            />
          </Box>
        </Box>
      </CustomDialogBox>
      <Box sx={{ display: "flex" }}>
        <Box>
          <Typography sx={{ mb: 2, ml: 3, mt: 2 }}>popup color</Typography>
          <BlockPicker
            color={blockPickerColor}
            onChange={(color: any) => {
              setBlockPickerColor(color.hex);
            }}
          />
          <Typography sx={{ mb: 2, ml: 3, mt: 2 }}>Text color</Typography>
          <BlockPicker
            color={TextPickerColor}
            onChange={(color: any) => {
              setTextPickerColor(color.hex);
            }}
          />
          <Typography sx={{ mb: 2, ml: 3, mt: 2 }}>
            Button-Background
          </Typography>
          <BlockPicker
            color={backgroundColorPicker}
            onChange={(color: any) => {
              setbackgroundColorPicker(color.hex);
            }}
          />
          {/* <Typography variant="h1">HOME PAGE</Typography> */}
          &nbsp;&nbsp;ButtonPosition&nbsp;&nbsp;
          <Button
            variant="contained"
            sx={{ color: "grey" }}
            onClick={() => (position ? setPosition(false) : setPosition(true))}
          >
            change button position Manage
          </Button>
        </Box>
        <Box></Box>
      </Box>
    </>
  );
};
Page.getLayout = function getLayout(page: React.ReactElement) {
  return <>{page};</>;
};
export default Page;
